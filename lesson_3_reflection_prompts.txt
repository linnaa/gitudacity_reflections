When would you want to use a remote repository rather than keeping all your work local?
	When you need to share your projects with the entire universe or collaborate.
	---
	git remote - check for remote repositories
	git remote add *remote repository name (origin)* *repo url on github* - create a new remote repository
	git push *remote name (origin)* *remote repository branch name (master)*



Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?
	Say a few people work on the same projct on the remote.
	When pulling manually you can always check for updates before you pull commits.
	If git made updates automatically you might get confused as you never know what
	has happend to your project.
	---
	git pull *remote name (origin)* *branch name on the remote*
	branches on local and remote repository not necessarily have the same name.


Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Forking creates a copy of someones repository and stores it on github servers.
	You might want to use it when you want to make changes that wouldn't involve the original repository.
	Clonning will create a copy and allow you to work on your local computer and then push changes to the
	remote repository or collaborate within a teem.
	Branch is a good way to try or offer changes without affecting the entire project rigth away.
	---
	clonning makes a copy on both local computer, between local and remote.
	it works on any two repositories.
	forking is used within a github to make a copy of some repository that will be stored on github servers.
	when you clone a repository git automatically sets up a remote repository
	when you fork a repository, then commit changes it addresses them to your copy but does not affect
	the original repository that you've forked.


What is the benefit of having a copy of the last known state of the remote stored locally?
	It allows you to separate your local changes from remote, you can deal with all the changes
	without losing the original state of your local branch and then push them to remote.
	---	
	if you make different commits on local and remote branch independently so that your local and remote
	master branch (for example) differ, pulling or pushing a branch in this case will rewrite a branch
	but not combine two versions of them. say you push a branch from local to remote - it will delete
	commits made on remote only. what you need is merging them.
	git stores local copies of all remote branches, that will contain the state of remotes as of the last
	time you pulled or pushed
	the local copy with the last known position of the remote
	it will have a name of the remote and branch of the remote separated by slash (e.g. origin/remote)
	when you commit a chenge to your local repository, the state of origin/master or master on github
	does not change. you need to push changes to have them updated.
	git fetch - updates local copy of the remote leaving your actual local branch unchanged, you can use
	git log and git diff to see what changes were introduced.
	then you can merge origin/master and your local master
	git pull is the same as git fetch followed by git merge
	git fetch origin - updates the local copy of remote
	git log origin/master - inspect the local copy of remote
	git diff origin/master master
	fast-forward merge - is a merge of two commits where one is the ancestor of the other


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	You could use emails or messengers to communicate and discuss it all in real life what is awfull.
	You would have to talk to people. Easier? You might get a candy. Harder? Collaboration can easily
	get messed up.
	---
	pull requests are the way to get feedback on offered changes. it allows contributors to review and comment.
	first create a new branch on local repo, then push to github (push origin *new-branch-name)
	on github you need to choose new-brangh (same as git checkout command) and clock pull request
	if you're working on fork repo github will asume you want to change the original repo by default
	so you need to change it to your fork if needed
	* pull request is alled so because oneperson requests that the other would pull changes into master*
	it is possible to comment the entire change or add an inline comment to some specific line
	* when you commit again it will show up in the thread of pull request


When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?
	Working in the master branch is time-saving and esier. Whereas creating a separate branch seems usefull
	when there's a risk of breacking something, creating a conflict inside a proram. And it is a good idea
	when people co;aborating are of different professional levels.
	---
	when a few people create pull request changin the same line(s), merge conflict occurs
	github requiers you to solve this conflict on local repo and then update the pull request
	with the merged version
	merge button on github will always create a new commit (no fast-forward commit when master
	upadets and shows last commit as top of the branch)
	if there are a few pull requests to same branch that don't cause a conflict, we could just merge those
	but if conflict occurs the author needs to pull branch on their local repo first
	but if he merged his branch into master the other contributor wouldn't have chance to check updates
	in collaborative progects the only way to merge is through pull requests. otherwise things might change
	from under you without notification
	so first author needs to merge master into his branch and push it up to github, updating the pull request
	so that collaborators can check it before merging into master

	* when you fork and make changes to both original repo and your fork you to make a remote to work with
	both of them. it is common to name your fork origin and name the original repo upstream

	* to allow peple to create pull requests you need to add them as collaborators on github.

